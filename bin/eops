#!/usr/bin/env iojs
;
var csv, fs, hashed_r, in_array, log_lib, md5, program, sha1;

program = require('commander');

fs = require('fs');

csv = require('csv-parser');

md5 = require('md5');

sha1 = require('sha1');

in_array = function(needle, haystack) {
  var i, key, len;
  for (i = 0, len = haystack.length; i < len; i++) {
    key = haystack[i];
    if (haystack[key] === needle) {
      return true;
    }
  }
  return false;
};

log_lib = function() {
  console.log('');
  console.log('Most org/sites doing matching want to see samples to know you "did it right". You can send them the below.');
  console.log('');
  console.log("Here's the samples:");
  return console.log('');
};

program.version('0.0.1').usage('eops [options] <emails.csv>').option('-c --compare <file>', 'hashed emails (already_hashed.csv)').option('-e --case <case>', 'whether to upper or lower case the email before hashing (upper, lower, as-is)', /^(upper|lower|as\-is)$/i, 'as-is').option('-o --output <output>', 'file name (exists.csv)').option('-r --hash <hash>', 'hash library (sha1, md5)', /^(sha|md5)$/i, 'md5').option('-s --salt <salt>', 'salt string. leave empty to not use a salt').option('-p --preset <preset>', 'Convenience preset for poitical services and publications (dailykos, demsdotcom, vindico, care2, upworthy)', /^(dailykos|demsdotcom|vindico|care2|upworthy)$/i).parse(process.argv);

if (!program.args[0]) {
  console.log('No file input provided');
} else if (program.args[0] === 'demsdotcom' || program.args[0] === 'dailykos') {
  if (program.args[0] === 'demsdotcom') {
    console.log('Democrats.com Hashing');
  } else if (program.args[0] === 'dailykos') {
    console.log('Daily Kos Hashing');
  }
  log_lib();
  console.log('someone@someTHing.com');
  console.log('someone@something.org');
  console.log('someone@something.net');
  console.log('');
  console.log(md5('someone@something.com'.toUpperCase()));
  console.log(md5('someone@something.org'.toUpperCase()));
  console.log(md5('someone@something.net'.toUpperCase()));
} else if (program.args[0] === 'care2' && program.salt) {
  console.log('Care2 Hashing');
  log_lib();
  console.log('someone@someTHing.com');
  console.log('someone@something.org');
  console.log('someone@something.net');
  console.log('');
  console.log(sha1(program.salt + 'someone@something.com'));
  console.log(sha1(program.salt + 'someone@something.org'));
  console.log(sha1(program.salt + 'someone@something.net'));
} else if (program.args[0] === 'care2' && !program.salt) {
  console.log('If you want to do Care2 hashing, you must supply a salt string.');
  console.log('');
  console.log('eops --preset care2 --salt 8zQgWkEKYH4VxHcHN3ecUiFEH emails.csv');
} else if (program.args[0] === 'vindico') {
  console.log('Vindico Hashing');
  log_lib();
  console.log('someone@someTHing.com');
  console.log('someone@something.org');
  console.log('someone@something.net');
  console.log('');
  console.log(md5('someone@something.com'));
  console.log(md5('someone@something.org'));
  console.log(md5('someone@something.net'));
} else if (program.args[0] === 'upworthy') {
  console.log('Upworthy Hashing');
  log_lib();
  console.log('someone@someTHing.com');
  console.log('someone@something.org');
  console.log('someone@something.net');
  console.log('');
  console.log(md5('someone@something.com'.toLowerCase()));
  console.log(md5('someone@something.org'.toLowerCase()));
  console.log(md5('someone@something.net'.toLowerCase()));
} else {
  if (program.compare) {
    hashed_r = [];
    fs.createReadStream(program.compare).pipe(csv()).on('data', function(hashed) {
      return hashed_r[hashed_r.length] = hashed.email;
    }).on('error', function(err) {
      return console.log(err);
    }).on('end', function() {
      if (program.output) {
        fs.unlinkSync(program.output);
      }
      return fs.createReadStream(program.args[0]).pipe(csv()).on('data', function(unhashed) {
        var i, key, len, results, to_check;
        to_check = md5(unhashed.email.toUpperCase());
        results = [];
        for (i = 0, len = hashed_r.length; i < len; i++) {
          key = hashed_r[i];
          if (key === to_check) {
            if (program.output) {
              results.push(fs.appendFileSync(program.output, unhashed.email.toLowerCase() + "\r\n"));
            } else {
              results.push(console.log(unhashed.email.toLowerCase()));
            }
          } else {
            results.push(void 0);
          }
        }
        return results;
      }).on('end', function() {
        return process.exit(0);
      }).on('error', function(err) {
        return console.log(err);
      });
    });
  } else {
    if (program.output) {
      fs.unlinkSync(program.output);
      fs.appendFileSync(program.output, 'email' + "\r\n");
    }
    fs.createReadStream(program.args[0]).pipe(csv()).on('data', function(unhashed) {
      var cased_email, hashed_email;
      if (program.args[0] === 'demsdotcom' || program.args[0] === 'dailykos') {
        program.hash = 'md5';
        program["case"] = 'upper';
      } else if (program.args[0] === 'care2' && program.salt) {
        program.hash = 'sha1';
        program["case"] = 'as-is';
        unhashed = program.salt + unhashed;
      } else if (program.args[0] === 'care2' && !program.salt) {
        console.log('If you want to do Care2 hashing, you must supply a salt string.');
        console.log('');
        console.log('eops --preset care2 --salt 8zQgWkEKYH4VxHcHN3ecUiFEH emails.csv');
        process.exit(1);
      } else if (program.args[0] === 'vindico') {
        program.hash = 'md5';
        program["case"] = 'as-is';
      } else if (program.args[0] === 'upworthy') {
        program.hash = 'md5';
        program["case"] = 'lower';
      }
      switch (program["case"]) {
        case 'upper':
          cased_email = unhashed.toUpperCase();
          break;
        case 'lower':
          cased_email = unhashed.toLowerCase();
          break;
        case 'as-is':
          cased_email = unhashed;
          break;
        default:
          cased_email = unhashed;
      }
      switch (program.hash) {
        case 'md5':
          hashed_email = md5(cased_email);
          break;
        case 'sha1':
          hashed_email = sha1(cased_email);
          break;
        default:
          hashed_email = md5(cased_email);
      }
      if (program.output) {
        return fs.appendFileSync(program.output, hashed_email + "\r\n");
      } else {
        return console.log(hashed_email);
      }
    }).on('end', function() {
      return process.exit(0);
    }).on('error', function(err) {
      return console.log('An error occurred:', err);
    });
  }
}
